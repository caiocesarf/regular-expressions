class Aut:
  # Esta classe representa um autômato de estado finito (FSA) e fornece métodos para inicializar, 
  # verificar se uma string é aceita pelo autômato e imprimir o caminho de transição para uma string de entrada.
  def __init__(self, ft, E_ini, E_fim, alf=[]):
    self.ft = ft
    self.E_ini = E_ini
    self.E_fim = E_fim
    

    if len(alf) == 0:
      self.alf = self._Rec_Alf(ft)
    else:
      self.alf = alf

  # Itera pelos valores (estados) da transição da função ( ft). Para cada símbolo na transição para um estado, verifica se já está no alfabeto
  def _Rec_Alf(self, ft):
    alf = []
    for transicoes in ft.values():
      for s in transicoes.keys():
        if s not in alf:
          alf.append(s)

    return alf

  #Imprime o caminho de transição para uma string de entrada, indicando se a string é aceita ou não.
  def estados_caminho(self, aceito, sent, estados_visitados):
    aceita_naoaceita = 'Cadeia aceita:' if aceito else 'Cadeia não aceita:'
    estados_entre_parenteses = [f'({estado})' for estado in estados_visitados]
    string_rastro = ' > '.join(estados_entre_parenteses)
    print(f'{aceita_naoaceita} {sent} = {string_rastro}')

  # Verifica se uma determinada string de entrada ( sent) é aceita pelo autômato
  def verifica_estado(self, sent, rastro=False):
    estados_visitados = []
    estado_atual = self.E_ini
    estados_visitados.append(estado_atual)

    #Repetição sobre o símbolo da sentença
    for s in sent:
      existe_no_alf = s in self.alf
      existe_transicao = s in self.ft[estado_atual].keys()

      # Se o símbolo não existe no alf reconhecido pelo autômato
      # ou se não existe transição com o símbolo atual, a partir do
      # estado atual, a sent é recusada
      if not existe_no_alf or not existe_transicao:
        if(rastro):
          self.estados_caminho(False, sent, estados_visitados)
        return False

      estado_atual = self.ft[estado_atual][s]

      if estado_atual == 'd':
        if(rastro):
          self.estados_caminho(False, sent, estados_visitados)
        return False

      estados_visitados.append(estado_atual)

    aceita = estado_atual in self.E_fim

    if(rastro):
      self.estados_caminho(aceita, sent, estados_visitados)

    return aceita

  #Testa uma lista de strings de entrada ( lista_de_sents) em relação ao autômato.
  def teste_cadeia(self, lista_de_sents):
    for sent in lista_de_sents:
        self.verifica_estado(sent, True)
# Define as transições de estado para a FSA.
